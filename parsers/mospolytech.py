import asyncio

import aiohttp

from bs4 import BeautifulSoup

specs = [
    '01.03.02_Интеллектуальные системы управления транспортом',
    '08.03.01_Промышленное и гражданское строительство, Теплогазоснабжение, вентиляция, водоснабжение и водоотведение',
    '08.05.01',
    '09.03.01_Веб-технологии',
    '09.03.01_Интеграция и программирование в САПР',
    '09.03.01_Программное обеспечение информационных систем',
    '09.03.01_Киберфизические системы',
    '09.03.01_Системная и программная инженерия',
    '09.03.01_Кибербезопасность автоматизированных систем',
    '09.03.02_АС обработки информации и управления; ИТ в медиаиндустрии и дизайне; Технологии доп и VR; ПО игровой компьютерной индустрии; ИС умных пространств',
    '09.03.02_Цифровая трансформация',
    '09.03.02_Автоматизированные системы обработки информации и управления',
    '09.03.03_Корпоративные информационные системы',
    '09.03.03_Большие и открытые данные',
    '09.03.03_Информационные технологии управления бизнесом',
    '10.03.01',
    '11.03.01_Интеллектуальная радиоэлектроника и промышленный интернет вещей',
    '13.03.01_Интеллектуальные тепловые энергосистемы',
    '13.03.02_Электрооборудование и промышленная электроника',
    '13.03.02_Электроснабжение',
    '13.03.03_Перспективные энергоустановки для электротранспорта и малой энергетики',
    '15.03.01_Машины и технологии обработки материалов давлением; Оборудование и технологии сварочного производства; Высокоэффективные тех процессы и оборудование',
    '15.03.01_Комплексные технологические процессы и оборудование машиностроения',
    '15.03.02_Реверс-инжиниринг процессов и оборудования',
    '15.03.03_Программирование и цифровые технологии в динамике и прочности',
    '15.03.04_Роботы и робототехнические устройства',
    '15.03.05_Компьютерное проектирование оборудования и производств',
    '15.03.05_Средства автоматизации и базы данных для проектирования технологических производств',
    '16.03.03',
    '19.03.01_Промышленная биотехнология и биоинженерия',
    '20.03.01_Экологическая и производственная безопасность; Природоохранные биотехнологии; Безопасность технологических процессов и производств',
    '21.05.04_Шахтное и подземное строительство; Маркшейдерское дело',
    '22.03.01_Перспективные материалы и технологии; Материаловедение и цифровые технологии',
    '22.03.02_Инновации в металлургии',
    '23.03.03_Инжиниринг и эксплуатация транспортных систем',
    '23.05.01_Спортивные транспортные средства',
    '23.05.01_Перспективные автомобили и электромобили',
    '23.05.01_Автомобили и автомобильный сервис',
    '23.05.01_Компьютерный инжиниринг в автомобилестроении',
    '27.03.04_Электронные системы управления',
    '27.03.05_Управление инновационной деятельностью',
    '27.03.05_Аддитивные технологии',
    '29.03.03_Технологии упаковочного производства; Бизнес-процессы печатной и упаковочной индустрии; Дизайн и проектирование мультимедиа и визуального контента',
    '29.03.04_Разработка и производство изделий промышленного дизайна; Художественное проектирование и цифровые технологии в ювелирном производстве',
    '29.03.04_Дизайн и конструирование рекламных и арт-объектов',
    '38.03.01_Экономика предприятий и организаций',
    '38.03.02_Управление бизнес-процессами',
    '38.03.02_Business process Management (study in English)',
    '38.03.03_Экономико-правовое обеспечение трудовых процессов',
    '42.03.01_Реклама и связи с общественностью в цифровых медиа; Интегрированные бренд-коммуникации',
    '42.03.02_Периодические издания и мультимедийная журналистика; Деловая журналистика',
    '42.03.03_Книгоиздательское дело; Газетно-журнальное издательское дело',
    '54.03.01_Транспортный и промышленный дизайн',
    '54.03.01_Графический дизайн мультимедиа',
    '54.05.03_Художник-график (оформление печатной продукции); Художник анимации и компьютерной графики'
]


async def mospolytech_parser():
    connector = aiohttp.TCPConnector(limit=50, force_close=True)

    async with aiohttp.ClientSession(connector=connector) as session:
        ranked_lists = []
        universities = []

        async def foo(spec, tp=0):
            fin = 'Бюджетная основа' if not tp else 'Полное возмещение затрат'

            async with session.post(f'https://raitinglistpk.mospolytech.ru/rating_list_ajax.php',
                                    data={'select1': '000000034_01',
                                          'specCode': spec,
                                          'eduForm': 'Очная',
                                          'eduFin': fin}) as resp:
                soup = await resp.text()

                soup = BeautifulSoup(soup, 'html.parser')

                direction = soup.find('a', {'href': "javascript:collapsElement('div4')"}).contents[3].contents[
                    1].text.strip()
                places = 10_000 if tp else soup.find('a', {'href': "javascript:collapsElement('div4')"}).contents[
                    3].contents[3].contents[0].text.split()[-1]
                n = 1

                abits = soup.find('table', {'border': '2', 'cellpadding': '3'}).find_all('tr', {'class': True})

                for abit in abits:
                    abit = abit.contents

                    if '0' in abit[39].text or '5' in abit[39].text:
                        snils = abit[5].text.strip().replace('-', '').replace(' ', '')
                        snils = ('Н' + snils) if len(snils) != 11 else ('С' + snils)
                        score = abit[23].text.strip() if abit[23].text.strip() else 0
                        bvi = 1 if '5' in abit[39].text else 0
                        original = 1 if 'да' in abit[27].text else 0
                        priority = abit[29].text

                        ranked_lists.append(('МосПолитех', direction, tp, n, snils, score, bvi, original, priority))

                        n += 1

                universities.append(('МосПолитех', direction, tp, places))

        tasks = []

        for spec in specs:
            tasks.append(asyncio.create_task(foo(spec)))

        for spec in specs:
            tasks.append(asyncio.create_task(foo(spec, 1)))

        await asyncio.gather(*tasks)

        return ranked_lists, universities


if __name__ == '__main__':
    loop = asyncio.new_event_loop()

    print(loop.run_until_complete(mospolytech_parser()))
